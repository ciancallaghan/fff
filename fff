#!/usr/bin/env/bash
#
# fff - fucking fast file-manager

get_os() {
	case $OSTYPE in
		darwin*)
			opener=open
			file_flags=bIL
			;;
	esac
}

setup_terminal() {
    printf '\e[?1049h\e[?7l\e[?25l\e[2J\e[1;%sr' "$max_items"

    stty -echo
}

reset_terminal() {
    printf '\e[?7h\e[?25h\e[2J\e[;r\e[?1049l'

    stty echo
}

clear_screen() {
	printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
		"$((LINES-2))" "${TMUX:+\e[2J}" "$max_items"
}

setup_options() {
    [[ $FFF_FILE_FORMAT == *%f* ]] && {
        file_pre=${FFF_FILE_FORMAT/'%f'*}
        file_post=${FFF_FILE_FORMAT/*'%f'}
    }

    if [[ $FFF_MARK_FORMAT == *%f* ]]; then
        mark_pre=${FFF_MARK_FORMAT/'%f'*}
        mark_post=${FFF_MARK_FORMAT/*'%f'}
    else
        mark_pre=" "
        mark_post="*"
    fi

    file -I &>/dev/null || : "${file_flags:=biL}"
}

get_term_size() {
    read -r LINES COLUMNS < <(stty size)

    ((max_items=LINES-3))
}

get_ls_colors() {
    [[ -z $LS_COLORS ]] && {
        FFF_LS_COLORS=0
        return
    }

    IFS=: read -ra ls_cols <<< "$LS_COLORS"

    for ((i=0;i<${#ls_cols[@]};i++)); {
		[[ ${ls_cols[i]} =~ ^\*[^\.] ]] &&
			ls_patterns+="${ls_cols[i]/=*}|"
        [[ ${ls_cols[i]} =~ ^(\*|\.) ]] && {
            ls_cols[i]=${ls_cols[i]#\*}
            ls_cols[i]=ls_${ls_cols[i]#.}
        }
    }

    ls_cols=("${ls_cols[@]//[^a-zA-Z0-9=\\;]/_}")

    ls_patterns=${ls_patterns//\*}
    ls_patterns=${ls_patterns%?}

    export "${ls_cols[@]}" &>/dev/null
}

get_mime_type() {
    mime_type=$(file "-${file_flags:-biL}" "$1" 2>/dev/null)
}

status_line() {
    local mark_ui="[${#marked_files[@]}] selected (${file_program[*]}) [p] ->"
	mark_ui="${marked_files[*]:+"$mark_ui"}"

	PWD_escaped=${PWD/[^[:print:]]/^[}

    printf '\e7\e[%sH\e[3%s;4%sm%*s\r%s %s%s\e[m\e[%sH\e[K\e8' \
	   "$((LINES-1))" \
	   "${FFF_COL5:-0}" \
	   "${FFF_COL2:-1}" \
	   "$COLUMNS" "" \
	   "($((scroll+1))/$((list_total+1)))" \
	   "$mark_ui" \
	   "${1:-${PWD_escaped:-/}}" \
	   "$LINES"
}

read_dir() {
    local dirs
    local files
    local item_index

    printf '\e]2;fff: %s\e'\\ "$PWD"

    [[ $PWD == / ]] && PWD=

    for item in "$PWD"/*; do
        if [[ -d $item ]]; then
            dirs+=("$item")
            [[ $item == "$OLDPWD" ]] &&
                ((previous_index=item_index))
            ((item_index++))
        else
            files+=("$item")
        fi
    done

    list=("${dirs[@]}" "${files[@]}")

    [[ -z ${list[0]} ]] &&
		list[0]=empty

    ((list_total=${#list[@]}-1))

    cur_list=("${list[@]}")
}

print_line() {
	local file_name=${list[$1]##*/}
	local file_ext=${file_name##*.}
	local format
	local suffix

	if [[ -z ${list[$1]} ]]; then
		return
	elif [[ -d ${list[$1]} ]]; then
		format+=\\e[${di:-1;3${FFF_COL1:-2}}m
		suffix+=/
    elif [[ -b ${list[$1]} ]]; then
        format+=\\e[${bd:-40;33;01}m
    elif [[ -c ${list[$1]} ]]; then
        format+=\\e[${cd:-40;33;01}m
    elif [[ -x ${list[$1]} ]]; then
        format+=\\e[${ex:-01;32}m
    elif [[ -h ${list[$1]} && ! -e ${list[$1]} ]]; then
        format+=\\e[${mi:-01;31;7}m
    elif [[ -h ${list[$1]} ]]; then
        format+=\\e[${ln:-01;36}m
    elif [[ -p ${list[$1]} ]]; then
        format+=\\e[${pi:-40;33}m
    elif [[ -S ${list[$1]} ]]; then
        format+=\\e[${so:-01;35}m
	elif [[ $FFF_LS_COLORS == 1 &&
		$ls_patterns &&
		$file_name =~ ($ls_patterns)$ ]]; then
			match=${BASH_REMATCH[0]}
			file_ext=ls_${match//[^a-zA-Z0-9=\\;]/_}
			format+=\\e[${!file_ext:-${fi:-37}}m
    elif [[ $FFF_LS_COLORS == 1 &&
            $file_ext != "$file_name" &&
            $file_ext =~ ^[a-zA-Z0-9_]*$ ]]; then
        file_ext=ls_${file_ext}
        format+=\\e[${!file_ext:-${fi:-37}}m
    else
        format+=\\e[${fi:-37}m
    fi

    (($1 == scroll)) &&
        format+="\\e[1;3${FFF_COL4:-6};7m"

	[[ ${marked_files[$1]} == "${list[$1]:-null}" ]] && {
        format+=\\e[3${FFF_COL3:-1}m${mark_pre}
        suffix+=${mark_post}
    }

    file_name=${file_name//[^[:print:]]/^[}

    printf '\r%b%s\e[m\r' \
        "${file_pre}${format}" \
        "${file_name}${suffix}${file_post}"
}

draw_dir() {
    local scroll_start=$scroll
    local scroll_new_pos
    local scroll_end

    ((find_previous == 1)) && {
        ((scroll_start=previous_index))
        ((scroll=scroll_start))

        find_previous=
    }

    if ((list_total < max_items || scroll < max_items/2)); then
        ((scroll_start=0))
        ((scroll_end=max_items))
        ((scroll_new_pos=scroll+1))
    elif ((list_total - scroll < max_items/2)); then
        ((scroll_start=list_total-max_items+1))
        ((scroll_new_pos=max_items-(list_total-scroll)))
        ((scroll_end=list_total+1))
    else
        ((scroll_start=scroll-max_items/2))
        ((scroll_end=scroll_start+max_items))
        ((scroll_new_pos=max_items/2+1))
    fi

    printf '\e[H'

    for ((i=scroll_start;i<scroll_end;i++)); {
        ((i > scroll_start)) &&
            printf '\n'

        print_line "$i"
    }

    printf '\e[%sH' "$scroll_new_pos"
    ((y=scroll_new_pos))
}

preview() {
	if [[ -d "${list[scroll]}" ]]; then
		return
	fi

	clear_screen
	reset_terminal

	"${FFF_PREVIEWER:-less}" "${list[scroll]}"

	setup_terminal
	redraw
}

redraw() {
    [[ $1 == full ]] && {
        read_dir
        scroll=0
    }

    clear_screen
    draw_dir
    status_line
}

mark() {
    [[ $PWD != "$mark_dir" ]] &&
        marked_files=()

    [[ ${list[0]} == empty && -z ${list[1]} ]] &&
        return

    if [[ $1 == all ]]; then
        if ((${#marked_files[@]} != ${#list[@]})); then
            marked_files=("${list[@]}")
            mark_dir=$PWD
        else
            marked_files=()
        fi
        redraw
    else
        if [[ ${marked_files[$1]} == "${list[$1]}" ]]; then
            unset 'marked_files[scroll]'
        else
            marked_files[$1]="${list[$1]}"
            mark_dir=$PWD
        fi
        printf '\e[K'
        print_line "$1"
    fi

    case "$2" in
        ${FFF_KEY_YANK:=y}|${FFF_KEY_YANK_ALL:=Y}) file_program=(cp -iR) ;;
        ${FFF_KEY_MOVE:=m}|${FFF_KEY_MOVE_ALL:=M}) file_program=(mv -i)  ;;
        ${FFF_KEY_LINK:=s}|${FFF_KEY_LINK_ALL:=S}) file_program=(ln -s)  ;;

        # These are 'fff' functions.
        ${FFF_KEY_TRASH:=d}|${FFF_KEY_TRASH_ALL:=D})
            file_program=(trash)
        ;;

        ${FFF_KEY_BULK_RENAME:=b}|${FFF_KEY_BULK_RENAME_ALL:=B})
            file_program=(bulk_rename)
        ;;
    esac

    status_line
}

trash() {
    cmd_line "trash [${#marked_files[@]}] items? [y/n]: " y n

    [[ $cmd_reply != y ]] &&
        return

    if [[ $FFF_TRASH_CMD ]]; then
        command "$FFF_TRASH_CMD" "${@:1:$#-1}"
    else
        cd "$FFF_TRASH" || cmd_line "error: Can't cd to trash directory."
        if cp -alf "$@" &>/dev/null; then
            rm -r "${@:1:$#-1}"
        else
            mv -f "$@"
        fi
        cd "$OLDPWD" ||:
    fi
}

bulk_rename() {
    rename_file=${XDG_CACHE_HOME:=${HOME}/.cache}/fff/bulk_rename
    marked_files=("${@:1:$#-1}")

    printf '%s\n' "${marked_files[@]##*/}" > "$rename_file"
    "${EDITOR:-vi}" "$rename_file"

    IFS=$'\n' read -d "" -ra changed_files < "$rename_file"

    ((${#marked_files[@]} != ${#changed_files[@]})) && {
        rm "$rename_file"
        cmd_line "error: Line mismatch in rename file. Doing nothing."
        return
    }

    printf '%s\n%s\n' \
        "# This file will be executed when the editor is closed." \
        "# Clear the file to abort." > "$rename_file"

    for ((i=0;i<${#marked_files[@]};i++)); {
        [[ ${marked_files[i]} != "${PWD}/${changed_files[i]}" ]] && {
            printf 'mv -i -- %q %q\n' \
                "${marked_files[i]}" "${PWD}/${changed_files[i]}"
            local renamed=1
        }
    } >> "$rename_file"

    ((renamed == 1)) && {
        "${EDITOR:-vi}" "$rename_file"
        source "$rename_file"
        rm "$rename_file"
    }

    setup_terminal
}

open() {
    if [[ -d $1/ ]]; then
        search=
        search_end_early=
        cd "${1:-/}" ||:
        redraw full
    elif [[ -f $1 ]]; then
        get_mime_type "$1"
		case "$mime_type" in
			text/*|*x-empty*|*json*)
                ((file_picker == 1)) && {
                    printf '%s\n' "$1" > \
                        "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/opened_file"
                    exit
                }
                clear_screen
                reset_terminal
                "${VISUAL:-${EDITOR:-vi}}" "$1"
                setup_terminal
                redraw
				;;
			*)
                nohup "${FFF_OPENER:-${opener:-${EDITOR:-vi}}}" "$1" &>/dev/null &
                disown
				;;
		esac
	fi
}

cmd_line() {
    cmd_reply=

    printf '\e7\e[%sH\e[?25h' "$LINES"

    while IFS= read -rsn 1 -p $'\r\e[K'"${1}${cmd_reply}" read_reply; do
        case $read_reply in
            $'\177'|$'\b')
                cmd_reply=${cmd_reply%?}
                unset comp c
				;;
            $'\t')
                comp_glob="$cmd_reply*"
                [[ $2 == dirs ]] &&
                    comp_glob="$cmd_reply*/"
                [[ -z ${comp[0]} ]] &&
                    IFS=$'\n' read -d "" -ra comp < <(compgen -G "$comp_glob")
                [[ -n ${comp[c]} ]] && {
                    cmd_reply=${comp[c]}
                    ((c=c >= ${#comp[@]}-1 ? 0 : ++c))
                }
				;;
            $'\e'|${3:-null})
                read "${read_flags[@]}" -rsn 2
                cmd_reply=
                break
				;;
            "")
				[[ $2 == search && -d ${list[0]} ]] && ((list_total == 0)) && {
                    printf '\e[?25l'
                    open "${list[0]}"
                    search_end_early=1
                    unset comp c
                    return
				}
				break
				;;
            ${2:-null})
                cmd_reply=$read_reply
                break
				;;
            "~")
                cmd_reply+=$HOME
				;;
            *)
                cmd_reply+=$read_reply
                unset comp c
				;;
		esac

        [[ $2 == search ]] && {
            printf '\e[?25l'
			list=("$PWD"/*"$cmd_reply"*)
            ((list_total=${#list[@]}-1))
            scroll=0
            redraw
            printf '\e[%sH\e[?25h' "$LINES"
        }
    done

    unset comp c

    printf '\e[2K\e[?25l\e8'
}

key() {
    [[ $1 == $'\e' ]] && {
        read "${read_flags[@]}" -rsn 2
        [[ ${1}${REPLY} == $'\e\e['* ]] &&
            read "${read_flags[@]}" -rsn 1 _

        local special_key=${1}${REPLY}
    }

    case ${special_key:-$1} in
		${FFF_KEY_SCROLL_DOWN:=j})
            while ((scroll < list_total)); do
                ((scroll++))
                ((y < max_items)) && ((y++))
                print_line "$((scroll-1))"
                printf '\n'
                print_line "$scroll"
                status_line
				[[ "${list[scroll]}" ]] && break
			done
			;;
		${FFF_KEY_SCROLL_UP:=k})
            while ((scroll > 0)); do
                ((scroll--))
                print_line "$((scroll+1))"
                if ((y < 2)); then
                    printf '\e[L'
                else
                    printf '\e[A'
                    ((y--))
                fi
                print_line "$scroll"
                status_line
				[[ "${list[scroll]}" ]] && break
			done
			;;
		${FFF_KEY_CHILD:=l})
            open "${list[scroll]}"
			;;
		${FFF_KEY_PARENT:=h})
            if ((search == 1 && search_end_early != 1)); then
                open "$PWD"
            elif [[ $PWD && $PWD != / ]]; then
                find_previous=1
                open "${PWD%/*}"
            fi
			;;
        ${FFF_KEY_TO_TOP:=g})
            ((scroll != 0)) && {
                scroll=0
                redraw
            }
        ${FFF_KEY_TO_BOTTOM:=G})
            ((scroll != list_total)) && {
                ((scroll=list_total))
                redraw
            }
        ${FFF_KEY_PREVIOUS:=-})
            open "$OLDPWD"
			;;
        ${FFF_KEY_GO_HOME:='~'})
            open ~
			;;
        ${FFF_KEY_GO_TRASH:=t})
            get_os
            open "$FFF_TRASH"
			;;
        ${FFF_KEY_GO_DIR:=:})
            cmd_line "go to dir: " "dirs"
            cd "$PWD" &>/dev/null ||:
            [[ $cmd_reply ]] &&
                cd "${cmd_reply/\~/$HOME}" &>/dev/null &&
                    open "$PWD"
			;;
        [1-9])
            favourite="FFF_FAV${1}"
            favourite="${!favourite}"

            [[ $favourite ]] &&
                open "$favourite"
			;;
        ${FFF_KEY_YANK:=y}|\
        ${FFF_KEY_MOVE:=m}|\
        ${FFF_KEY_TRASH:=d}|\
        ${FFF_KEY_LINK:=s}|\
        ${FFF_KEY_BULK_RENAME:=b})
            mark "$scroll" "$1"
			;;
        ${FFF_KEY_YANK_ALL:=Y}|\
        ${FFF_KEY_MOVE_ALL:=M}|\
        ${FFF_KEY_TRASH_ALL:=D}|\
        ${FFF_KEY_LINK_ALL:=S}|\
        ${FFF_KEY_BULK_RENAME_ALL:=B})
            mark all "$1"
			;;
        ${FFF_KEY_PASTE:=p})
            [[ ${marked_files[*]} ]] && {
                [[ ! -w $PWD ]] && {
                    cmd_line "warn: no write access to dir."
                    return
                }
                clear_screen
                reset_terminal
                stty echo
                printf '\e[1mfff\e[m: %s\n' "Running ${file_program[0]}"
                "${file_program[@]}" "${marked_files[@]}" .
                stty -echo
                marked_files=()
                setup_terminal
                redraw full
            }
			;;
        ${FFF_KEY_CLEAR:=c})
            [[ ${marked_files[*]} ]] && {
                marked_files=()
                redraw
            }
			;;
        ${FFF_KEY_ATTRIBUTES:=x})
            [[ -e "${list[scroll]}" ]] && {
                clear_screen
                status_line "${list[scroll]}"
                "${FFF_STAT_CMD:-stat}" "${list[scroll]}"
                read -ern 1
                redraw
            }
			;;
        ${FFF_KEY_PREVIEW:=i})
            preview
			;;
        ${FFF_KEY_MKFILE:=n})
            cmd_line "mkfile: "
            [[ $cmd_reply ]] &&
                if [[ -e $cmd_reply ]]; then
                    cmd_line "warn: '$cmd_reply' already exists."
                elif [[ -w $PWD ]]; then
                    : > "$cmd_reply"
                    redraw full
                else
                    cmd_line "warn: no write access to dir."
                fi
			;;
        ${FFF_KEY_MKDIR:=N})
            cmd_line "mkdir: " "dirs"
            [[ $cmd_reply ]] &&
                if [[ -e $cmd_reply ]]; then
                    cmd_line "warn: '$cmd_reply' already exists."
                elif [[ -w $PWD ]]; then
                    mkdir -p "${PWD}/${cmd_reply}"
                    redraw full
                else
                    cmd_line "warn: no write access to dir."
                fi
			;;
        ${FFF_KEY_RENAME:=r})
            [[ ! -e ${list[scroll]} ]] &&
                return
            cmd_line "rename ${list[scroll]##*/}: "
            [[ $cmd_reply ]] &&
                if [[ -e $cmd_reply ]]; then
                    cmd_line "warn: '$cmd_reply' already exists."
                elif [[ -w ${list[scroll]} ]]; then
                    mv "${list[scroll]}" "${PWD}/${cmd_reply}"
                    redraw full
                else
                    cmd_line "warn: no write access to file."
                fi
			;;
        ${FFF_KEY_EXECUTABLE:=X})
            [[ -f ${list[scroll]} && -w ${list[scroll]} ]] && {
                if [[ -x ${list[scroll]} ]]; then
                    chmod -x "${list[scroll]}"
                    status_line "Unset executable."
                else
                    chmod +x "${list[scroll]}"
                    status_line "Set executable."
                fi
            }
			;;
        ${FFF_KEY_SHELL:=!})
            reset_terminal
            export FFF_LEVEL
            ((FFF_LEVEL++))
            cd "$PWD" && "$SHELL"
            setup_terminal
            redraw full
			;;
        ${FFF_KEY_SEARCH:=/})
            cmd_line "/" "search"
            if [[ -z ${list[*]} ]]; then
                list=("${cur_list[@]}")
                ((list_total=${#list[@]}-1))
                redraw
                search=
            else
                search=1
            fi
			;;
        ${FFF_KEY_HIDDEN:=.})
            shopt_flags=(u s)
            shopt -"${shopt_flags[((a=${a:=$FFF_HIDDEN}>0?0:++a))]}" dotglob
            redraw full
			;;
        ${FFF_KEY_REFRESH:=R})
            open "$PWD"
			;;
        q)
            : "${FFF_CD_FILE:=${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d}"
            [[ -w $FFF_CD_FILE ]] &&
                rm "$FFF_CD_FILE"
            [[ ${FFF_CD_ON_EXIT:=1} == 1 ]] &&
                printf '%s\n' "$PWD" > "$FFF_CD_FILE"
            exit
			;;
	esac
}

main() {
    cd "${2:-$1}" &>/dev/null ||:

    [[ $1 == -v ]] && {
        printf '%s\n' "fff 2.2"
        exit
    }

    [[ $1 == -h ]] && {
        man fff
        exit
    }

    [[ $1 == -p ]] &&
        file_picker=1

    ((BASH_VERSINFO[0] > 3)) &&
        read_flags=(-t 0.05)

    ((${FFF_LS_COLORS:=1} == 1)) &&
        get_ls_colors

    ((${FFF_HIDDEN:=0} == 1)) &&
        shopt -s dotglob

    mkdir -p "${XDG_CACHE_HOME:=${HOME}/.cache}/fff" \
             "${FFF_TRASH:=${XDG_DATA_HOME:=${HOME}/.local/share}/fff/trash}"

    shopt -s nocaseglob nullglob

    trap 'reset_terminal' EXIT

    trap 'get_term_size; redraw' WINCH

    get_os
    get_term_size
    setup_options
    setup_terminal
    redraw full

    for ((;;)); {
        read "${read_flags[@]}" -srn 1 && key "$REPLY"
        [[ -t 1 ]] || exit 1
    }
}

main "$@"
